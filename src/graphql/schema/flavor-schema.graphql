extend type Query {
	flavor(name: ID!): Flavor
	flavors(limit: Int, cursor: ID): FlavorSubList
}

extend type Mutation {
	createFlavor(input: CreateFlavorInput!): Flavor
	updateFlavor(input: UpdateFlavorInput!): Flavor
	deleteFlavor(name: ID!): Flavor
	createPairing(input: CreatePairingInput!): Pairing
}

type Flavor {
	name: ID!
	taste: [Taste!]
	volume: [Volume!]
	weight: [Weight!]
	technique: [Technique!]
	pairings(limit: Int, cursor: ID): PairingSubList
}

type FlavorSubList {
	items: [Flavor!]!
	totalCount: Int!
}

type PairingSubList {
	items: [Paired!]!
	totalCount: Int!
}

input CreateFlavorInput {
	name: ID!
}

input UpdateFlavorInput {
	name: ID!
	updatedName: ID!
}

type Pairing {
	flavor: Flavor!
	paired: Paired!
}

type Paired {
	flavor: Flavor!
	affinity: PairingAffinity!
}

input CreatePairingInput {
	flavor1: ID!
	flavor2: ID!
	affinity: PairingAffinity!
}

enum PairingAffinity {
	REGULAR
	BOLD
	CAPS
	ASTERISK
	AVOID
}
