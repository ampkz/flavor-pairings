extend type Query {
	flavor(name: ID!): Flavor
	flavors(limit: Int, cursor: ID): FlavorSubList
}

extend type Mutation {
	createFlavor(input: CreateFlavorInput!): FlavorResult!
	updateFlavor(input: UpdateFlavorInput!): UpdateFlavorResult!
	deleteFlavor(name: ID!): FlavorResult!
	flavorTips(name: ID!, tips: String): FlavorTipsResult!
	createPairing(input: CreatePairingInput!): PairingResult!
	deletePairing(input: DeletePairingInput!): PairingResult!
	createFlavorReference(input: FlavorReferenceInput!): FlavorReferenceResult!
	deleteFlavorReference(input: FlavorReferenceInput!): FlavorReferenceResult!
}

type Flavor {
	name: ID!
	taste: [Taste!]
	volume: [Volume!]
	weight: [Weight!]
	technique: [Technique!]
	tips: String
	see: Flavor
	pairings(limit: Int, cursor: ID): PairingSubList
}

input FlavorReferenceInput {
	from: ID!
	to: ID!
}

type FlavorReferenceResult {
	success: Boolean!
	from: Flavor!
	to: Flavor!
	message: String
}

type FlavorResult {
	success: Boolean!
	flavor: Flavor!
	message: String
}

type FlavorTipsResult {
	success: Boolean!
	flavor: Flavor!
	tips: String
}

type FlavorSubList {
	items: [Flavor!]!
	totalCount: Int!
}

type PairingSubList {
	items: [Paired!]!
	totalCount: Int!
}

input CreateFlavorInput {
	name: ID!
}

input UpdateFlavorInput {
	name: ID!
	updatedName: ID!
}

type UpdateFlavorResult {
	success: Boolean!
	flavor: Flavor!
	previousFlavor: Flavor!
}

type Pairing {
	flavor: Flavor!
	paired: Paired!
}

type Paired {
	flavor: Flavor!
	affinity: PairingAffinity!
	especially: String
}

input CreatePairingInput {
	flavor1: ID!
	flavor2: ID!
	affinity: PairingAffinity!
	especially: String
}

type PairingResult {
	success: Boolean!
	pairing: Pairing!
}

input DeletePairingInput {
	flavor1: ID!
	flavor2: ID!
	affinity: PairingAffinity!
}

enum PairingAffinity {
	REGULAR
	BOLD
	CAPS
	ASTERISK
	AVOID
}
