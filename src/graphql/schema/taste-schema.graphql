extend type Query {
	taste(name: ID!): Taste
	tastes: [Taste!]!
}

extend type Mutation {
	createTaste(name: ID!): TasteResult!
	updateTaste(input: UpdateTasteInput!): UpdateTasteResult!
	deleteTaste(name: ID!): TasteResult!
	addTaste(input: AddTasteInput!): AddTasteResult!
}

type TasteResult {
	success: Boolean!
	taste: Taste!
	message: String
}

type AddTasteResult {
	success: Boolean!
	taste: Taste!
	flavor: Flavor!
}

type UpdateTasteResult {
	success: Boolean!
	taste: Taste!
	previousTaste: Taste!
}

type Taste {
	name: ID!
}

input AddTasteInput {
	flavor: ID!
	taste: ID!
}

input UpdateTasteInput {
	name: ID!
	updatedName: ID!
}
